name: Deploy to EC2 (Simple)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment package
      run: |
        # Create a clean deployment package
        tar --exclude='.git' --exclude='node_modules' --exclude='.env' -czf deployment.tar.gz .

    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        source: "deployment.tar.gz"
        target: "/home/ec2-user/"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # Install Git and Docker if not already installed
          sudo yum update -y
          sudo yum install -y git docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -a -G docker ec2-user
          
          # Fix Docker permissions
          sudo chmod 666 /var/run/docker.sock
          
          # Install Docker Compose if not exists
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Create deployment directory
          mkdir -p /home/ec2-user/bookorder-app
          
          # Extract new files
          cd /home/ec2-user
          tar -xzf deployment.tar.gz -C bookorder-app --strip-components=0
          cd /home/ec2-user/bookorder-app
          
          # Create production environment file
          cat > .env << EOF
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          INFOBIP_API_KEY=${{ secrets.INFOBIP_API_KEY }}
          INFOBIP_BASE_URL=${{ secrets.INFOBIP_BASE_URL }}
          INFOBIP_APP_ID=${{ secrets.INFOBIP_APP_ID }}
          INFOBIP_MESSAGE_ID=${{ secrets.INFOBIP_MESSAGE_ID }}
          ENVIRONMENT=production
          ALLOWED_ORIGINS=*
          EOF
          
          # Stop existing containers
          sudo docker-compose down || true
          
          # Remove old images to save space
          sudo docker system prune -f || true
          
          # Build and start new containers
          sudo docker-compose up -d --build
          
          # Wait and check health
          sleep 15
          echo "=== Container Status ==="
          sudo docker-compose ps
          echo "=== Health Check ==="
          curl -f http://localhost:8000/health || echo "Health check failed - app might still be starting"
          
          # Clean up
          rm -f /home/ec2-user/deployment.tar.gz
